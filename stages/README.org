#+Title: Internships project
#+Description: Build a web application in order to manage all the internships made by the students of the 2nd year of the Ecole des Mines de Nantes (http://www.mines-nantes.fr)

* Internship
  The project proposes a RESTful architecture to manage our internships. 
  For the client part, we use the JavaScript framework [[http://backbonejs.org/][Backbonejs]]. For the server part, we use the java jax-rs technology.
  The rest of this document describes API, implementations and
  installation.

** API - working with internships

*** Internship Entry
    The Internship API allows manipulation of Internship Entry. The format
    of a Internship Entry is the following:
    #+BEGIN_SRC json
    {
      "id" : "Internship identifier",
      "intitule" : "Brief description explaining the internship",
      "option" : "Our school has 10 specialities, the user has to choose between them",
      "description" : "Description of the internship",
      "adresse" : "Adress of the company",
      "pays" : "Country of the company",
      "salaire" : "Earning of the studient during the internship",
      "avantages" : "Advantages offered by the company",
      "langue" : "Language used during the internship"
    }
    #+END_SRC

*** Retrieving all internships
    To retrieve all of internships, send a ~GET~ request. Upon
    success, the server responds with a ~HTTP 200 OK~ status code and
    the requested contacts set.

    Request
    #+BEGIN_SRC example
    GET stages
    #+END_SRC

    Response:
    #+BEGIN_SRC json
    
    Status Code: 200 OK
    Content-Type: application/json
    Date: Mon, 22 Apr 2013 20:59:32 GMT
    Server: Apache-Coyote/1.1
    Transfer-Encoding: chunked
    access-control-allow-origin: *



    [
  {
    "id": {
      "time": 1366641738000,
      "new": false,
      "inc": 1798942067,
      "machine": -2081434795,
      "timeSecond": 1366641738
    },
	...
    #+END_SRC

*** Creating internship
    To create a new internship, send a ~POST~ request with in the
    payload, the new internship. Upon success, the server responds with
    an ~HTTP 201 Created~ status code and the created contact entry
    with ~id~ set by the server.

    Request:
    #+BEGIN_SRC example
    POST stagess/addStage
    ...

    {
      "option": "GIPAD",
       "description": "You will be in charge of...",
       "pays": "USA",
       "adresse": "New York City...",
       "domaine": null,
       "intitule": "International internship in Google",
       "salaire": "1000 $",
       "avantages": "Gym, a day of work at home...",
       "langue": "English"
    }
    #+END_SRC

    Response:
    #+BEGIN_SRC example
    HTTP/1.1 201 Created
    ...

    {
       "id":
       {
           "time": 1366664704000,
           "new": false,
           "inc": 1395151418,
           "machine": -1717089160,
           "timeSecond": 1366664704
       },
       "option": "GIPAD",
       "description": "You will be in charge of...",
       "pays": "USA",
       "adresse": "New York City...",
       "domaine": null,
       "intitule": "International internship in Google",
       "salaire": "1000 $",
       "avantages": "Gym, a day of work at home...",
       "langue": "English"
    }
    #+END_SRC

*** Updating internships
    To update an internship, first retrieve the internship entry, modify the
    data and send a ~PUT~ request to the internship's edit URL with the
    modified internship entry in the body. Upon success, the server
    responds with an ~HTTP 200 OK~ status code and the updated contact
    entry.

    Request:
    #+BEGIN_SRC example
    PUT stages/editStage/{stageID}
    ...

    {
      "id":     "03",
      "nom":    "GORDON",
      "prenom": "JAMES",
      "numero": "22-333-444"
    }
    #+END_SRC

    Response:
    #+BEGIN_SRC example
    HTTP/1.1 200 OK
    ...

    {
      "id":     "03",
      "nom":    "GORDON",
      "prenom": "JAMES",
      "numero": "22-333-444"
    }
    #+END_SRC

**** TODO See more about ETag on updating contacts
     [[http://stackoverflow.com/questions/2085411/how-to-use-cxf-jax-rs-and-http-caching][How to use CXF, JAX-RS and HTTP Caching]]

*** Deleting contacts
    To delete a contact, send a ~DELETE~ request to the contact's edit
    URL. Upon success, the server responds with an ~HTTP 200 OK~
    status code.

    Request:
    #+BEGIN_SRC example
    DELETE contacts/editContact/{contactID}
    #+END_SRC

    Response:
    #+BEGIN_SRC example
    HTTP/1.1 200 OK
    #+END_SRC

**** TODO See more about ETag on updating contacts
     [[http://stackoverflow.com/questions/2085411/how-to-use-cxf-jax-rs-and-http-caching][How to use CXF, JAX-RS and HTTP Caching]]

** JAVA/JAX-RS implementation

*** JAX-RS Technology
    #+BEGIN_QUOTE
    "JAX-RS: Java API for RESTful Web Services is a Java programming
    language API that provides support in creating web services
    according to the REST architectural style." [[http://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services][Wikipedia]]
    #+END_QUOTE

*** Initialization and Boilerplating
    With maven, generate a Simple CXF JAX-RS webapp service using
    Spring configuration. To do so, launch the archetype:generation as
    follows (~groupId~ defined the package and ~arctifactId~ defined
    the project name):

    #+BEGIN_SRC bash
    mvn archetype:generate -DgroupId=fr.emn.ose.contact -DartifactId=jaxrs-contact  -Dversion=1.0-SNAPSHOT
    #+END_SRC

    Then, in the list of potential archetype, chose
    ~org.apache.cxf.archetype:cxf-jaxrs-service~. On my computer, it's
    222 number. Choosing archetype
    ~org.apache.cxf.archetype:cxf-jaxrs-service~ will automatically
    import required libraries and generate boilerplate for a JAX-RS
    webapp.

*** Launch
    To launch the application just tell to maven to deploy it on a
    tomcat infrastructure:
    #+BEGIN_SRC bash
    mvn clean install tomcat:run-war
    #+END_SRC

    Now the application is accessible at
    [[http://locahost:8080/rest-contact/]]. For more information about
    tomcat cycle in maven, refer to the [[http://maven.apache.org/][maven general documentation]].

** Node.js/restify implementation

*** Restify technology
#+BEGIN_QUOTE
"restify is a node.js module built specifically to enable you to build correct REST web services." [[http://mcavage.github.com/node-restify/][API Restify]]
#+END_QUOTE
*** Initialization
Restify has to be installed on the computer. You can refer to the Restify API.
*** Launch
To launch the application write in your bash : 
#+BEGIN_SRC bash
    node contact.js
    #+END_SRC
where contact.js is the file you want to launch
** TODO Backbone.js client
** DELEGATED Twitter/Flight client
